
Aula_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b7c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002d54  08002d54  00012d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d94  08002d94  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002d94  08002d94  00012d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d9c  08002d9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d9c  08002d9c  00012d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002da0  08002da0  00012da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002da4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08002db0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002db0  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5b5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a05  00000000  00000000  0002c5f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  0002dff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a0  00000000  00000000  0002e930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023ee2  00000000  00000000  0002f1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b42e  00000000  00000000  000530b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5839  00000000  00000000  0005e4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00143d19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024e4  00000000  00000000  00143d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002d3c 	.word	0x08002d3c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002d3c 	.word	0x08002d3c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fa2b 	bl	800097a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f81f 	bl	8000566 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f8b2 	bl	8000690 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800052c:	f000 f866 	bl	80005fc <MX_LPUART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000530:	2120      	movs	r1, #32
 8000532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000536:	f000 fd5d 	bl	8000ff4 <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 800053a:	20fa      	movs	r0, #250	; 0xfa
 800053c:	f000 fa8e 	bl	8000a5c <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_YELLOW_DA_GPIO_Port, LED_YELLOW_DA_Pin);
 8000540:	2110      	movs	r1, #16
 8000542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000546:	f000 fd55 	bl	8000ff4 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800054a:	2120      	movs	r1, #32
 800054c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000550:	f000 fd50 	bl	8000ff4 <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 8000554:	20fa      	movs	r0, #250	; 0xfa
 8000556:	f000 fa81 	bl	8000a5c <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_YELLOW_DA_GPIO_Port, LED_YELLOW_DA_Pin);
 800055a:	2110      	movs	r1, #16
 800055c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000560:	f000 fd48 	bl	8000ff4 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000564:	e7e4      	b.n	8000530 <main+0x14>

08000566 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	b094      	sub	sp, #80	; 0x50
 800056a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056c:	f107 0318 	add.w	r3, r7, #24
 8000570:	2238      	movs	r2, #56	; 0x38
 8000572:	2100      	movs	r1, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f002 fbd9 	bl	8002d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000588:	2000      	movs	r0, #0
 800058a:	f000 fd71 	bl	8001070 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058e:	2302      	movs	r3, #2
 8000590:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000592:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000596:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000598:	2340      	movs	r3, #64	; 0x40
 800059a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059c:	2302      	movs	r3, #2
 800059e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a0:	2302      	movs	r3, #2
 80005a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005a4:	2304      	movs	r3, #4
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005a8:	2355      	movs	r3, #85	; 0x55
 80005aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 0318 	add.w	r3, r7, #24
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 fe0b 	bl	80011d8 <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005c8:	f000 f8e8 	bl	800079c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d0:	2303      	movs	r3, #3
 80005d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2104      	movs	r1, #4
 80005e4:	4618      	mov	r0, r3
 80005e6:	f001 f90f 	bl	8001808 <HAL_RCC_ClockConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005f0:	f000 f8d4 	bl	800079c <Error_Handler>
  }
}
 80005f4:	bf00      	nop
 80005f6:	3750      	adds	r7, #80	; 0x50
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000600:	4b21      	ldr	r3, [pc, #132]	; (8000688 <MX_LPUART1_UART_Init+0x8c>)
 8000602:	4a22      	ldr	r2, [pc, #136]	; (800068c <MX_LPUART1_UART_Init+0x90>)
 8000604:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000606:	4b20      	ldr	r3, [pc, #128]	; (8000688 <MX_LPUART1_UART_Init+0x8c>)
 8000608:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800060c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800060e:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <MX_LPUART1_UART_Init+0x8c>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000614:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <MX_LPUART1_UART_Init+0x8c>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800061a:	4b1b      	ldr	r3, [pc, #108]	; (8000688 <MX_LPUART1_UART_Init+0x8c>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000620:	4b19      	ldr	r3, [pc, #100]	; (8000688 <MX_LPUART1_UART_Init+0x8c>)
 8000622:	220c      	movs	r2, #12
 8000624:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000626:	4b18      	ldr	r3, [pc, #96]	; (8000688 <MX_LPUART1_UART_Init+0x8c>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800062c:	4b16      	ldr	r3, [pc, #88]	; (8000688 <MX_LPUART1_UART_Init+0x8c>)
 800062e:	2200      	movs	r2, #0
 8000630:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000632:	4b15      	ldr	r3, [pc, #84]	; (8000688 <MX_LPUART1_UART_Init+0x8c>)
 8000634:	2200      	movs	r2, #0
 8000636:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000638:	4b13      	ldr	r3, [pc, #76]	; (8000688 <MX_LPUART1_UART_Init+0x8c>)
 800063a:	2200      	movs	r2, #0
 800063c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800063e:	4812      	ldr	r0, [pc, #72]	; (8000688 <MX_LPUART1_UART_Init+0x8c>)
 8000640:	f001 fd4c 	bl	80020dc <HAL_UART_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800064a:	f000 f8a7 	bl	800079c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800064e:	2100      	movs	r1, #0
 8000650:	480d      	ldr	r0, [pc, #52]	; (8000688 <MX_LPUART1_UART_Init+0x8c>)
 8000652:	f002 fa7d 	bl	8002b50 <HAL_UARTEx_SetTxFifoThreshold>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800065c:	f000 f89e 	bl	800079c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000660:	2100      	movs	r1, #0
 8000662:	4809      	ldr	r0, [pc, #36]	; (8000688 <MX_LPUART1_UART_Init+0x8c>)
 8000664:	f002 fab2 	bl	8002bcc <HAL_UARTEx_SetRxFifoThreshold>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800066e:	f000 f895 	bl	800079c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_LPUART1_UART_Init+0x8c>)
 8000674:	f002 fa33 	bl	8002ade <HAL_UARTEx_DisableFifoMode>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800067e:	f000 f88d 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000028 	.word	0x20000028
 800068c:	40008000 	.word	0x40008000

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a6:	4b3a      	ldr	r3, [pc, #232]	; (8000790 <MX_GPIO_Init+0x100>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	4a39      	ldr	r2, [pc, #228]	; (8000790 <MX_GPIO_Init+0x100>)
 80006ac:	f043 0304 	orr.w	r3, r3, #4
 80006b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b2:	4b37      	ldr	r3, [pc, #220]	; (8000790 <MX_GPIO_Init+0x100>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	f003 0304 	and.w	r3, r3, #4
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006be:	4b34      	ldr	r3, [pc, #208]	; (8000790 <MX_GPIO_Init+0x100>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	4a33      	ldr	r2, [pc, #204]	; (8000790 <MX_GPIO_Init+0x100>)
 80006c4:	f043 0320 	orr.w	r3, r3, #32
 80006c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ca:	4b31      	ldr	r3, [pc, #196]	; (8000790 <MX_GPIO_Init+0x100>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	f003 0320 	and.w	r3, r3, #32
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <MX_GPIO_Init+0x100>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	4a2d      	ldr	r2, [pc, #180]	; (8000790 <MX_GPIO_Init+0x100>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <MX_GPIO_Init+0x100>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <MX_GPIO_Init+0x100>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	4a27      	ldr	r2, [pc, #156]	; (8000790 <MX_GPIO_Init+0x100>)
 80006f4:	f043 0302 	orr.w	r3, r3, #2
 80006f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fa:	4b25      	ldr	r3, [pc, #148]	; (8000790 <MX_GPIO_Init+0x100>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	f003 0302 	and.w	r3, r3, #2
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_YELLOW_DA_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2130      	movs	r1, #48	; 0x30
 800070a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070e:	f000 fc59 	bl	8000fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Red_PWM_GPIO_Port, LED_Red_PWM_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000718:	481e      	ldr	r0, [pc, #120]	; (8000794 <MX_GPIO_Init+0x104>)
 800071a:	f000 fc53 	bl	8000fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800071e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000724:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	4619      	mov	r1, r3
 8000734:	4818      	ldr	r0, [pc, #96]	; (8000798 <MX_GPIO_Init+0x108>)
 8000736:	f000 fac3 	bl	8000cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_YELLOW_DA_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_DA_Pin|LD2_Pin;
 800073a:	2330      	movs	r3, #48	; 0x30
 800073c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	4619      	mov	r1, r3
 8000750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000754:	f000 fab4 	bl	8000cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Red_PWM_Pin */
  GPIO_InitStruct.Pin = LED_Red_PWM_Pin;
 8000758:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800075c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075e:	2301      	movs	r3, #1
 8000760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2300      	movs	r3, #0
 8000768:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Red_PWM_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	4808      	ldr	r0, [pc, #32]	; (8000794 <MX_GPIO_Init+0x104>)
 8000772:	f000 faa5 	bl	8000cc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	2028      	movs	r0, #40	; 0x28
 800077c:	f000 fa6b 	bl	8000c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000780:	2028      	movs	r0, #40	; 0x28
 8000782:	f000 fa82 	bl	8000c8a <HAL_NVIC_EnableIRQ>

}
 8000786:	bf00      	nop
 8000788:	3728      	adds	r7, #40	; 0x28
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40021000 	.word	0x40021000
 8000794:	48000400 	.word	0x48000400
 8000798:	48000800 	.word	0x48000800

0800079c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a0:	b672      	cpsid	i
}
 80007a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <Error_Handler+0x8>
	...

080007a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <HAL_MspInit+0x44>)
 80007b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007b2:	4a0e      	ldr	r2, [pc, #56]	; (80007ec <HAL_MspInit+0x44>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6613      	str	r3, [r2, #96]	; 0x60
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <HAL_MspInit+0x44>)
 80007bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <HAL_MspInit+0x44>)
 80007c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ca:	4a08      	ldr	r2, [pc, #32]	; (80007ec <HAL_MspInit+0x44>)
 80007cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d0:	6593      	str	r3, [r2, #88]	; 0x58
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <HAL_MspInit+0x44>)
 80007d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007de:	f000 fceb 	bl	80011b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000

080007f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b09e      	sub	sp, #120	; 0x78
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	2254      	movs	r2, #84	; 0x54
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f002 fa8b 	bl	8002d2c <memset>
  if(huart->Instance==LPUART1)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a1f      	ldr	r2, [pc, #124]	; (8000898 <HAL_UART_MspInit+0xa8>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d136      	bne.n	800088e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000820:	2320      	movs	r3, #32
 8000822:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000824:	2300      	movs	r3, #0
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	4618      	mov	r0, r3
 800082e:	f001 fa07 	bl	8001c40 <HAL_RCCEx_PeriphCLKConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000838:	f7ff ffb0 	bl	800079c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800083c:	4b17      	ldr	r3, [pc, #92]	; (800089c <HAL_UART_MspInit+0xac>)
 800083e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000840:	4a16      	ldr	r2, [pc, #88]	; (800089c <HAL_UART_MspInit+0xac>)
 8000842:	f043 0301 	orr.w	r3, r3, #1
 8000846:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <HAL_UART_MspInit+0xac>)
 800084a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <HAL_UART_MspInit+0xac>)
 8000856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000858:	4a10      	ldr	r2, [pc, #64]	; (800089c <HAL_UART_MspInit+0xac>)
 800085a:	f043 0301 	orr.w	r3, r3, #1
 800085e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <HAL_UART_MspInit+0xac>)
 8000862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800086c:	230c      	movs	r3, #12
 800086e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800087c:	230c      	movs	r3, #12
 800087e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000880:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000884:	4619      	mov	r1, r3
 8000886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088a:	f000 fa19 	bl	8000cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800088e:	bf00      	nop
 8000890:	3778      	adds	r7, #120	; 0x78
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40008000 	.word	0x40008000
 800089c:	40021000 	.word	0x40021000

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <NMI_Handler+0x4>

080008a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <MemManage_Handler+0x4>

080008b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <BusFault_Handler+0x4>

080008b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <UsageFault_Handler+0x4>

080008be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ec:	f000 f898 	bl	8000a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80008f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80008fc:	f000 fb94 	bl	8001028 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}

08000904 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <SystemInit+0x20>)
 800090a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800090e:	4a05      	ldr	r2, [pc, #20]	; (8000924 <SystemInit+0x20>)
 8000910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000914:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000928:	480d      	ldr	r0, [pc, #52]	; (8000960 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800092a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800092c:	480d      	ldr	r0, [pc, #52]	; (8000964 <LoopForever+0x6>)
  ldr r1, =_edata
 800092e:	490e      	ldr	r1, [pc, #56]	; (8000968 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000930:	4a0e      	ldr	r2, [pc, #56]	; (800096c <LoopForever+0xe>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000934:	e002      	b.n	800093c <LoopCopyDataInit>

08000936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093a:	3304      	adds	r3, #4

0800093c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800093c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000940:	d3f9      	bcc.n	8000936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000942:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000944:	4c0b      	ldr	r4, [pc, #44]	; (8000974 <LoopForever+0x16>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000948:	e001      	b.n	800094e <LoopFillZerobss>

0800094a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800094c:	3204      	adds	r2, #4

0800094e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000950:	d3fb      	bcc.n	800094a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000952:	f7ff ffd7 	bl	8000904 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000956:	f002 f9c5 	bl	8002ce4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800095a:	f7ff fddf 	bl	800051c <main>

0800095e <LoopForever>:

LoopForever:
    b LoopForever
 800095e:	e7fe      	b.n	800095e <LoopForever>
  ldr   r0, =_estack
 8000960:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000968:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800096c:	08002da4 	.word	0x08002da4
  ldr r2, =_sbss
 8000970:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000974:	200000bc 	.word	0x200000bc

08000978 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC1_2_IRQHandler>

0800097a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000980:	2300      	movs	r3, #0
 8000982:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000984:	2003      	movs	r0, #3
 8000986:	f000 f95b 	bl	8000c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800098a:	2000      	movs	r0, #0
 800098c:	f000 f80e 	bl	80009ac <HAL_InitTick>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d002      	beq.n	800099c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	71fb      	strb	r3, [r7, #7]
 800099a:	e001      	b.n	80009a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800099c:	f7ff ff04 	bl	80007a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009a0:	79fb      	ldrb	r3, [r7, #7]

}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009b4:	2300      	movs	r3, #0
 80009b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80009b8:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <HAL_InitTick+0x68>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d022      	beq.n	8000a06 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <HAL_InitTick+0x6c>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <HAL_InitTick+0x68>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80009d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d4:	4618      	mov	r0, r3
 80009d6:	f000 f966 	bl	8000ca6 <HAL_SYSTICK_Config>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d10f      	bne.n	8000a00 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2b0f      	cmp	r3, #15
 80009e4:	d809      	bhi.n	80009fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e6:	2200      	movs	r2, #0
 80009e8:	6879      	ldr	r1, [r7, #4]
 80009ea:	f04f 30ff 	mov.w	r0, #4294967295
 80009ee:	f000 f932 	bl	8000c56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009f2:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <HAL_InitTick+0x70>)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6013      	str	r3, [r2, #0]
 80009f8:	e007      	b.n	8000a0a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	73fb      	strb	r3, [r7, #15]
 80009fe:	e004      	b.n	8000a0a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a00:	2301      	movs	r3, #1
 8000a02:	73fb      	strb	r3, [r7, #15]
 8000a04:	e001      	b.n	8000a0a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000008 	.word	0x20000008
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	20000004 	.word	0x20000004

08000a20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <HAL_IncTick+0x1c>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <HAL_IncTick+0x20>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a03      	ldr	r2, [pc, #12]	; (8000a3c <HAL_IncTick+0x1c>)
 8000a30:	6013      	str	r3, [r2, #0]
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	200000b8 	.word	0x200000b8
 8000a40:	20000008 	.word	0x20000008

08000a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return uwTick;
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <HAL_GetTick+0x14>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	200000b8 	.word	0x200000b8

08000a5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a64:	f7ff ffee 	bl	8000a44 <HAL_GetTick>
 8000a68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a74:	d004      	beq.n	8000a80 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <HAL_Delay+0x40>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a80:	bf00      	nop
 8000a82:	f7ff ffdf 	bl	8000a44 <HAL_GetTick>
 8000a86:	4602      	mov	r2, r0
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	68fa      	ldr	r2, [r7, #12]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d8f7      	bhi.n	8000a82 <HAL_Delay+0x26>
  {
  }
}
 8000a92:	bf00      	nop
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000008 	.word	0x20000008

08000aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000abc:	4013      	ands	r3, r2
 8000abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ad2:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	60d3      	str	r3, [r2, #12]
}
 8000ad8:	bf00      	nop
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <__NVIC_GetPriorityGrouping+0x18>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	0a1b      	lsrs	r3, r3, #8
 8000af2:	f003 0307 	and.w	r3, r3, #7
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	db0b      	blt.n	8000b2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	f003 021f 	and.w	r2, r3, #31
 8000b1c:	4907      	ldr	r1, [pc, #28]	; (8000b3c <__NVIC_EnableIRQ+0x38>)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	095b      	lsrs	r3, r3, #5
 8000b24:	2001      	movs	r0, #1
 8000b26:	fa00 f202 	lsl.w	r2, r0, r2
 8000b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000e100 	.word	0xe000e100

08000b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	6039      	str	r1, [r7, #0]
 8000b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	db0a      	blt.n	8000b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	490c      	ldr	r1, [pc, #48]	; (8000b8c <__NVIC_SetPriority+0x4c>)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	0112      	lsls	r2, r2, #4
 8000b60:	b2d2      	uxtb	r2, r2
 8000b62:	440b      	add	r3, r1
 8000b64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b68:	e00a      	b.n	8000b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	4908      	ldr	r1, [pc, #32]	; (8000b90 <__NVIC_SetPriority+0x50>)
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	f003 030f 	and.w	r3, r3, #15
 8000b76:	3b04      	subs	r3, #4
 8000b78:	0112      	lsls	r2, r2, #4
 8000b7a:	b2d2      	uxtb	r2, r2
 8000b7c:	440b      	add	r3, r1
 8000b7e:	761a      	strb	r2, [r3, #24]
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000e100 	.word	0xe000e100
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b089      	sub	sp, #36	; 0x24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	f1c3 0307 	rsb	r3, r3, #7
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	bf28      	it	cs
 8000bb2:	2304      	movcs	r3, #4
 8000bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	2b06      	cmp	r3, #6
 8000bbc:	d902      	bls.n	8000bc4 <NVIC_EncodePriority+0x30>
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3b03      	subs	r3, #3
 8000bc2:	e000      	b.n	8000bc6 <NVIC_EncodePriority+0x32>
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	43da      	mvns	r2, r3
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	401a      	ands	r2, r3
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	fa01 f303 	lsl.w	r3, r1, r3
 8000be6:	43d9      	mvns	r1, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bec:	4313      	orrs	r3, r2
         );
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3724      	adds	r7, #36	; 0x24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
	...

08000bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c0c:	d301      	bcc.n	8000c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e00f      	b.n	8000c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c12:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <SysTick_Config+0x40>)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c1a:	210f      	movs	r1, #15
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	f7ff ff8e 	bl	8000b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <SysTick_Config+0x40>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2a:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <SysTick_Config+0x40>)
 8000c2c:	2207      	movs	r2, #7
 8000c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	e000e010 	.word	0xe000e010

08000c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff ff29 	bl	8000aa0 <__NVIC_SetPriorityGrouping>
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b086      	sub	sp, #24
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
 8000c62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c64:	f7ff ff40 	bl	8000ae8 <__NVIC_GetPriorityGrouping>
 8000c68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	68b9      	ldr	r1, [r7, #8]
 8000c6e:	6978      	ldr	r0, [r7, #20]
 8000c70:	f7ff ff90 	bl	8000b94 <NVIC_EncodePriority>
 8000c74:	4602      	mov	r2, r0
 8000c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff5f 	bl	8000b40 <__NVIC_SetPriority>
}
 8000c82:	bf00      	nop
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff33 	bl	8000b04 <__NVIC_EnableIRQ>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ffa4 	bl	8000bfc <SysTick_Config>
 8000cb4:	4603      	mov	r3, r0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b087      	sub	sp, #28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000cce:	e15a      	b.n	8000f86 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f000 814c 	beq.w	8000f80 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 0303 	and.w	r3, r3, #3
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d005      	beq.n	8000d00 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d130      	bne.n	8000d62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	68da      	ldr	r2, [r3, #12]
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d36:	2201      	movs	r2, #1
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	4013      	ands	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	091b      	lsrs	r3, r3, #4
 8000d4c:	f003 0201 	and.w	r2, r3, #1
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 0303 	and.w	r3, r3, #3
 8000d6a:	2b03      	cmp	r3, #3
 8000d6c:	d017      	beq.n	8000d9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	2203      	movs	r2, #3
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	689a      	ldr	r2, [r3, #8]
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d123      	bne.n	8000df2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	08da      	lsrs	r2, r3, #3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3208      	adds	r2, #8
 8000db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	220f      	movs	r2, #15
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	691a      	ldr	r2, [r3, #16]
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	f003 0307 	and.w	r3, r3, #7
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	08da      	lsrs	r2, r3, #3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3208      	adds	r2, #8
 8000dec:	6939      	ldr	r1, [r7, #16]
 8000dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 0203 	and.w	r2, r3, #3
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f000 80a6 	beq.w	8000f80 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e34:	4b5b      	ldr	r3, [pc, #364]	; (8000fa4 <HAL_GPIO_Init+0x2e4>)
 8000e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e38:	4a5a      	ldr	r2, [pc, #360]	; (8000fa4 <HAL_GPIO_Init+0x2e4>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6613      	str	r3, [r2, #96]	; 0x60
 8000e40:	4b58      	ldr	r3, [pc, #352]	; (8000fa4 <HAL_GPIO_Init+0x2e4>)
 8000e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e4c:	4a56      	ldr	r2, [pc, #344]	; (8000fa8 <HAL_GPIO_Init+0x2e8>)
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	089b      	lsrs	r3, r3, #2
 8000e52:	3302      	adds	r3, #2
 8000e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	f003 0303 	and.w	r3, r3, #3
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	220f      	movs	r2, #15
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e76:	d01f      	beq.n	8000eb8 <HAL_GPIO_Init+0x1f8>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a4c      	ldr	r2, [pc, #304]	; (8000fac <HAL_GPIO_Init+0x2ec>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d019      	beq.n	8000eb4 <HAL_GPIO_Init+0x1f4>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a4b      	ldr	r2, [pc, #300]	; (8000fb0 <HAL_GPIO_Init+0x2f0>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d013      	beq.n	8000eb0 <HAL_GPIO_Init+0x1f0>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a4a      	ldr	r2, [pc, #296]	; (8000fb4 <HAL_GPIO_Init+0x2f4>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d00d      	beq.n	8000eac <HAL_GPIO_Init+0x1ec>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a49      	ldr	r2, [pc, #292]	; (8000fb8 <HAL_GPIO_Init+0x2f8>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d007      	beq.n	8000ea8 <HAL_GPIO_Init+0x1e8>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a48      	ldr	r2, [pc, #288]	; (8000fbc <HAL_GPIO_Init+0x2fc>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d101      	bne.n	8000ea4 <HAL_GPIO_Init+0x1e4>
 8000ea0:	2305      	movs	r3, #5
 8000ea2:	e00a      	b.n	8000eba <HAL_GPIO_Init+0x1fa>
 8000ea4:	2306      	movs	r3, #6
 8000ea6:	e008      	b.n	8000eba <HAL_GPIO_Init+0x1fa>
 8000ea8:	2304      	movs	r3, #4
 8000eaa:	e006      	b.n	8000eba <HAL_GPIO_Init+0x1fa>
 8000eac:	2303      	movs	r3, #3
 8000eae:	e004      	b.n	8000eba <HAL_GPIO_Init+0x1fa>
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	e002      	b.n	8000eba <HAL_GPIO_Init+0x1fa>
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e000      	b.n	8000eba <HAL_GPIO_Init+0x1fa>
 8000eb8:	2300      	movs	r3, #0
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	f002 0203 	and.w	r2, r2, #3
 8000ec0:	0092      	lsls	r2, r2, #2
 8000ec2:	4093      	lsls	r3, r2
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eca:	4937      	ldr	r1, [pc, #220]	; (8000fa8 <HAL_GPIO_Init+0x2e8>)
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	089b      	lsrs	r3, r3, #2
 8000ed0:	3302      	adds	r3, #2
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ed8:	4b39      	ldr	r3, [pc, #228]	; (8000fc0 <HAL_GPIO_Init+0x300>)
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d003      	beq.n	8000efc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000efc:	4a30      	ldr	r2, [pc, #192]	; (8000fc0 <HAL_GPIO_Init+0x300>)
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f02:	4b2f      	ldr	r3, [pc, #188]	; (8000fc0 <HAL_GPIO_Init+0x300>)
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f26:	4a26      	ldr	r2, [pc, #152]	; (8000fc0 <HAL_GPIO_Init+0x300>)
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000f2c:	4b24      	ldr	r3, [pc, #144]	; (8000fc0 <HAL_GPIO_Init+0x300>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f50:	4a1b      	ldr	r2, [pc, #108]	; (8000fc0 <HAL_GPIO_Init+0x300>)
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f56:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <HAL_GPIO_Init+0x300>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f7a:	4a11      	ldr	r2, [pc, #68]	; (8000fc0 <HAL_GPIO_Init+0x300>)
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	3301      	adds	r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f47f ae9d 	bne.w	8000cd0 <HAL_GPIO_Init+0x10>
  }
}
 8000f96:	bf00      	nop
 8000f98:	bf00      	nop
 8000f9a:	371c      	adds	r7, #28
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	40010000 	.word	0x40010000
 8000fac:	48000400 	.word	0x48000400
 8000fb0:	48000800 	.word	0x48000800
 8000fb4:	48000c00 	.word	0x48000c00
 8000fb8:	48001000 	.word	0x48001000
 8000fbc:	48001400 	.word	0x48001400
 8000fc0:	40010400 	.word	0x40010400

08000fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	807b      	strh	r3, [r7, #2]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fd4:	787b      	ldrb	r3, [r7, #1]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fda:	887a      	ldrh	r2, [r7, #2]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fe0:	e002      	b.n	8000fe8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fe2:	887a      	ldrh	r2, [r7, #2]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	695b      	ldr	r3, [r3, #20]
 8001004:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001006:	887a      	ldrh	r2, [r7, #2]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4013      	ands	r3, r2
 800100c:	041a      	lsls	r2, r3, #16
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	43d9      	mvns	r1, r3
 8001012:	887b      	ldrh	r3, [r7, #2]
 8001014:	400b      	ands	r3, r1
 8001016:	431a      	orrs	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	619a      	str	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001034:	695a      	ldr	r2, [r3, #20]
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	4013      	ands	r3, r2
 800103a:	2b00      	cmp	r3, #0
 800103c:	d006      	beq.n	800104c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800103e:	4a05      	ldr	r2, [pc, #20]	; (8001054 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	4618      	mov	r0, r3
 8001048:	f000 f806 	bl	8001058 <HAL_GPIO_EXTI_Callback>
  }
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40010400 	.word	0x40010400

08001058 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d141      	bne.n	8001102 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800107e:	4b4b      	ldr	r3, [pc, #300]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800108a:	d131      	bne.n	80010f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800108c:	4b47      	ldr	r3, [pc, #284]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800108e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001092:	4a46      	ldr	r2, [pc, #280]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001098:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800109c:	4b43      	ldr	r3, [pc, #268]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010a4:	4a41      	ldr	r2, [pc, #260]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010ac:	4b40      	ldr	r3, [pc, #256]	; (80011b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2232      	movs	r2, #50	; 0x32
 80010b2:	fb02 f303 	mul.w	r3, r2, r3
 80010b6:	4a3f      	ldr	r2, [pc, #252]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80010b8:	fba2 2303 	umull	r2, r3, r2, r3
 80010bc:	0c9b      	lsrs	r3, r3, #18
 80010be:	3301      	adds	r3, #1
 80010c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010c2:	e002      	b.n	80010ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010ca:	4b38      	ldr	r3, [pc, #224]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010d6:	d102      	bne.n	80010de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1f2      	bne.n	80010c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010de:	4b33      	ldr	r3, [pc, #204]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ea:	d158      	bne.n	800119e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e057      	b.n	80011a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010f0:	4b2e      	ldr	r3, [pc, #184]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010f6:	4a2d      	ldr	r2, [pc, #180]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001100:	e04d      	b.n	800119e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001108:	d141      	bne.n	800118e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800110a:	4b28      	ldr	r3, [pc, #160]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001116:	d131      	bne.n	800117c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001118:	4b24      	ldr	r3, [pc, #144]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800111a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800111e:	4a23      	ldr	r2, [pc, #140]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001124:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001128:	4b20      	ldr	r3, [pc, #128]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001130:	4a1e      	ldr	r2, [pc, #120]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001132:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001136:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001138:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2232      	movs	r2, #50	; 0x32
 800113e:	fb02 f303 	mul.w	r3, r2, r3
 8001142:	4a1c      	ldr	r2, [pc, #112]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001144:	fba2 2303 	umull	r2, r3, r2, r3
 8001148:	0c9b      	lsrs	r3, r3, #18
 800114a:	3301      	adds	r3, #1
 800114c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800114e:	e002      	b.n	8001156 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	3b01      	subs	r3, #1
 8001154:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800115e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001162:	d102      	bne.n	800116a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1f2      	bne.n	8001150 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001176:	d112      	bne.n	800119e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e011      	b.n	80011a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800117e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001188:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800118c:	e007      	b.n	800119e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800118e:	4b07      	ldr	r3, [pc, #28]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001196:	4a05      	ldr	r2, [pc, #20]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001198:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800119c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	40007000 	.word	0x40007000
 80011b0:	20000000 	.word	0x20000000
 80011b4:	431bde83 	.word	0x431bde83

080011b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80011c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c6:	6093      	str	r3, [r2, #8]
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40007000 	.word	0x40007000

080011d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e306      	b.n	80017f8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d075      	beq.n	80012e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011f6:	4b97      	ldr	r3, [pc, #604]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 030c 	and.w	r3, r3, #12
 80011fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001200:	4b94      	ldr	r3, [pc, #592]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	2b0c      	cmp	r3, #12
 800120e:	d102      	bne.n	8001216 <HAL_RCC_OscConfig+0x3e>
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	2b03      	cmp	r3, #3
 8001214:	d002      	beq.n	800121c <HAL_RCC_OscConfig+0x44>
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	2b08      	cmp	r3, #8
 800121a:	d10b      	bne.n	8001234 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800121c:	4b8d      	ldr	r3, [pc, #564]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d05b      	beq.n	80012e0 <HAL_RCC_OscConfig+0x108>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d157      	bne.n	80012e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e2e1      	b.n	80017f8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800123c:	d106      	bne.n	800124c <HAL_RCC_OscConfig+0x74>
 800123e:	4b85      	ldr	r3, [pc, #532]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a84      	ldr	r2, [pc, #528]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 8001244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	e01d      	b.n	8001288 <HAL_RCC_OscConfig+0xb0>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001254:	d10c      	bne.n	8001270 <HAL_RCC_OscConfig+0x98>
 8001256:	4b7f      	ldr	r3, [pc, #508]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a7e      	ldr	r2, [pc, #504]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 800125c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	4b7c      	ldr	r3, [pc, #496]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a7b      	ldr	r2, [pc, #492]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 8001268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	e00b      	b.n	8001288 <HAL_RCC_OscConfig+0xb0>
 8001270:	4b78      	ldr	r3, [pc, #480]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a77      	ldr	r2, [pc, #476]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 8001276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4b75      	ldr	r3, [pc, #468]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a74      	ldr	r2, [pc, #464]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 8001282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d013      	beq.n	80012b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001290:	f7ff fbd8 	bl	8000a44 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001298:	f7ff fbd4 	bl	8000a44 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b64      	cmp	r3, #100	; 0x64
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e2a6      	b.n	80017f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012aa:	4b6a      	ldr	r3, [pc, #424]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f0      	beq.n	8001298 <HAL_RCC_OscConfig+0xc0>
 80012b6:	e014      	b.n	80012e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b8:	f7ff fbc4 	bl	8000a44 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c0:	f7ff fbc0 	bl	8000a44 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b64      	cmp	r3, #100	; 0x64
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e292      	b.n	80017f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012d2:	4b60      	ldr	r3, [pc, #384]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f0      	bne.n	80012c0 <HAL_RCC_OscConfig+0xe8>
 80012de:	e000      	b.n	80012e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d075      	beq.n	80013da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012ee:	4b59      	ldr	r3, [pc, #356]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012f8:	4b56      	ldr	r3, [pc, #344]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	2b0c      	cmp	r3, #12
 8001306:	d102      	bne.n	800130e <HAL_RCC_OscConfig+0x136>
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	2b02      	cmp	r3, #2
 800130c:	d002      	beq.n	8001314 <HAL_RCC_OscConfig+0x13c>
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	2b04      	cmp	r3, #4
 8001312:	d11f      	bne.n	8001354 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001314:	4b4f      	ldr	r3, [pc, #316]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800131c:	2b00      	cmp	r3, #0
 800131e:	d005      	beq.n	800132c <HAL_RCC_OscConfig+0x154>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d101      	bne.n	800132c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e265      	b.n	80017f8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132c:	4b49      	ldr	r3, [pc, #292]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	061b      	lsls	r3, r3, #24
 800133a:	4946      	ldr	r1, [pc, #280]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 800133c:	4313      	orrs	r3, r2
 800133e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001340:	4b45      	ldr	r3, [pc, #276]	; (8001458 <HAL_RCC_OscConfig+0x280>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fb31 	bl	80009ac <HAL_InitTick>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d043      	beq.n	80013d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e251      	b.n	80017f8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d023      	beq.n	80013a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800135c:	4b3d      	ldr	r3, [pc, #244]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a3c      	ldr	r2, [pc, #240]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 8001362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001368:	f7ff fb6c 	bl	8000a44 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001370:	f7ff fb68 	bl	8000a44 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e23a      	b.n	80017f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001382:	4b34      	ldr	r3, [pc, #208]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138e:	4b31      	ldr	r3, [pc, #196]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	061b      	lsls	r3, r3, #24
 800139c:	492d      	ldr	r1, [pc, #180]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	604b      	str	r3, [r1, #4]
 80013a2:	e01a      	b.n	80013da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013a4:	4b2b      	ldr	r3, [pc, #172]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a2a      	ldr	r2, [pc, #168]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 80013aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b0:	f7ff fb48 	bl	8000a44 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b8:	f7ff fb44 	bl	8000a44 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e216      	b.n	80017f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013ca:	4b22      	ldr	r3, [pc, #136]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f0      	bne.n	80013b8 <HAL_RCC_OscConfig+0x1e0>
 80013d6:	e000      	b.n	80013da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d041      	beq.n	800146a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d01c      	beq.n	8001428 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 80013f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013f4:	4a17      	ldr	r2, [pc, #92]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013fe:	f7ff fb21 	bl	8000a44 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001406:	f7ff fb1d 	bl	8000a44 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e1ef      	b.n	80017f8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001418:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 800141a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0ef      	beq.n	8001406 <HAL_RCC_OscConfig+0x22e>
 8001426:	e020      	b.n	800146a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 800142a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800142e:	4a09      	ldr	r2, [pc, #36]	; (8001454 <HAL_RCC_OscConfig+0x27c>)
 8001430:	f023 0301 	bic.w	r3, r3, #1
 8001434:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001438:	f7ff fb04 	bl	8000a44 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800143e:	e00d      	b.n	800145c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001440:	f7ff fb00 	bl	8000a44 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d906      	bls.n	800145c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e1d2      	b.n	80017f8 <HAL_RCC_OscConfig+0x620>
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000
 8001458:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800145c:	4b8c      	ldr	r3, [pc, #560]	; (8001690 <HAL_RCC_OscConfig+0x4b8>)
 800145e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1ea      	bne.n	8001440 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 80a6 	beq.w	80015c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800147c:	4b84      	ldr	r3, [pc, #528]	; (8001690 <HAL_RCC_OscConfig+0x4b8>)
 800147e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <HAL_RCC_OscConfig+0x2b4>
 8001488:	2301      	movs	r3, #1
 800148a:	e000      	b.n	800148e <HAL_RCC_OscConfig+0x2b6>
 800148c:	2300      	movs	r3, #0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d00d      	beq.n	80014ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	4b7f      	ldr	r3, [pc, #508]	; (8001690 <HAL_RCC_OscConfig+0x4b8>)
 8001494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001496:	4a7e      	ldr	r2, [pc, #504]	; (8001690 <HAL_RCC_OscConfig+0x4b8>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149c:	6593      	str	r3, [r2, #88]	; 0x58
 800149e:	4b7c      	ldr	r3, [pc, #496]	; (8001690 <HAL_RCC_OscConfig+0x4b8>)
 80014a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014aa:	2301      	movs	r3, #1
 80014ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ae:	4b79      	ldr	r3, [pc, #484]	; (8001694 <HAL_RCC_OscConfig+0x4bc>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d118      	bne.n	80014ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014ba:	4b76      	ldr	r3, [pc, #472]	; (8001694 <HAL_RCC_OscConfig+0x4bc>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a75      	ldr	r2, [pc, #468]	; (8001694 <HAL_RCC_OscConfig+0x4bc>)
 80014c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014c6:	f7ff fabd 	bl	8000a44 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ce:	f7ff fab9 	bl	8000a44 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e18b      	b.n	80017f8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014e0:	4b6c      	ldr	r3, [pc, #432]	; (8001694 <HAL_RCC_OscConfig+0x4bc>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0f0      	beq.n	80014ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d108      	bne.n	8001506 <HAL_RCC_OscConfig+0x32e>
 80014f4:	4b66      	ldr	r3, [pc, #408]	; (8001690 <HAL_RCC_OscConfig+0x4b8>)
 80014f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014fa:	4a65      	ldr	r2, [pc, #404]	; (8001690 <HAL_RCC_OscConfig+0x4b8>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001504:	e024      	b.n	8001550 <HAL_RCC_OscConfig+0x378>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2b05      	cmp	r3, #5
 800150c:	d110      	bne.n	8001530 <HAL_RCC_OscConfig+0x358>
 800150e:	4b60      	ldr	r3, [pc, #384]	; (8001690 <HAL_RCC_OscConfig+0x4b8>)
 8001510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001514:	4a5e      	ldr	r2, [pc, #376]	; (8001690 <HAL_RCC_OscConfig+0x4b8>)
 8001516:	f043 0304 	orr.w	r3, r3, #4
 800151a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800151e:	4b5c      	ldr	r3, [pc, #368]	; (8001690 <HAL_RCC_OscConfig+0x4b8>)
 8001520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001524:	4a5a      	ldr	r2, [pc, #360]	; (8001690 <HAL_RCC_OscConfig+0x4b8>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800152e:	e00f      	b.n	8001550 <HAL_RCC_OscConfig+0x378>
 8001530:	4b57      	ldr	r3, [pc, #348]	; (8001690 <HAL_RCC_OscConfig+0x4b8>)
 8001532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001536:	4a56      	ldr	r2, [pc, #344]	; (8001690 <HAL_RCC_OscConfig+0x4b8>)
 8001538:	f023 0301 	bic.w	r3, r3, #1
 800153c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001540:	4b53      	ldr	r3, [pc, #332]	; (8001690 <HAL_RCC_OscConfig+0x4b8>)
 8001542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001546:	4a52      	ldr	r2, [pc, #328]	; (8001690 <HAL_RCC_OscConfig+0x4b8>)
 8001548:	f023 0304 	bic.w	r3, r3, #4
 800154c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d016      	beq.n	8001586 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001558:	f7ff fa74 	bl	8000a44 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800155e:	e00a      	b.n	8001576 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001560:	f7ff fa70 	bl	8000a44 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	f241 3288 	movw	r2, #5000	; 0x1388
 800156e:	4293      	cmp	r3, r2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e140      	b.n	80017f8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001576:	4b46      	ldr	r3, [pc, #280]	; (8001690 <HAL_RCC_OscConfig+0x4b8>)
 8001578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0ed      	beq.n	8001560 <HAL_RCC_OscConfig+0x388>
 8001584:	e015      	b.n	80015b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001586:	f7ff fa5d 	bl	8000a44 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800158c:	e00a      	b.n	80015a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800158e:	f7ff fa59 	bl	8000a44 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	f241 3288 	movw	r2, #5000	; 0x1388
 800159c:	4293      	cmp	r3, r2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e129      	b.n	80017f8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015a4:	4b3a      	ldr	r3, [pc, #232]	; (8001690 <HAL_RCC_OscConfig+0x4b8>)
 80015a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1ed      	bne.n	800158e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015b2:	7ffb      	ldrb	r3, [r7, #31]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d105      	bne.n	80015c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b8:	4b35      	ldr	r3, [pc, #212]	; (8001690 <HAL_RCC_OscConfig+0x4b8>)
 80015ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015bc:	4a34      	ldr	r2, [pc, #208]	; (8001690 <HAL_RCC_OscConfig+0x4b8>)
 80015be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0320 	and.w	r3, r3, #32
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d03c      	beq.n	800164a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d01c      	beq.n	8001612 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015d8:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <HAL_RCC_OscConfig+0x4b8>)
 80015da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015de:	4a2c      	ldr	r2, [pc, #176]	; (8001690 <HAL_RCC_OscConfig+0x4b8>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e8:	f7ff fa2c 	bl	8000a44 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015f0:	f7ff fa28 	bl	8000a44 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e0fa      	b.n	80017f8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001602:	4b23      	ldr	r3, [pc, #140]	; (8001690 <HAL_RCC_OscConfig+0x4b8>)
 8001604:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0ef      	beq.n	80015f0 <HAL_RCC_OscConfig+0x418>
 8001610:	e01b      	b.n	800164a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001612:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <HAL_RCC_OscConfig+0x4b8>)
 8001614:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001618:	4a1d      	ldr	r2, [pc, #116]	; (8001690 <HAL_RCC_OscConfig+0x4b8>)
 800161a:	f023 0301 	bic.w	r3, r3, #1
 800161e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001622:	f7ff fa0f 	bl	8000a44 <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800162a:	f7ff fa0b 	bl	8000a44 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e0dd      	b.n	80017f8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <HAL_RCC_OscConfig+0x4b8>)
 800163e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1ef      	bne.n	800162a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 80d1 	beq.w	80017f6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <HAL_RCC_OscConfig+0x4b8>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 030c 	and.w	r3, r3, #12
 800165c:	2b0c      	cmp	r3, #12
 800165e:	f000 808b 	beq.w	8001778 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d15e      	bne.n	8001728 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <HAL_RCC_OscConfig+0x4b8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a08      	ldr	r2, [pc, #32]	; (8001690 <HAL_RCC_OscConfig+0x4b8>)
 8001670:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001676:	f7ff f9e5 	bl	8000a44 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800167c:	e00c      	b.n	8001698 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167e:	f7ff f9e1 	bl	8000a44 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d905      	bls.n	8001698 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e0b3      	b.n	80017f8 <HAL_RCC_OscConfig+0x620>
 8001690:	40021000 	.word	0x40021000
 8001694:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001698:	4b59      	ldr	r3, [pc, #356]	; (8001800 <HAL_RCC_OscConfig+0x628>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1ec      	bne.n	800167e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016a4:	4b56      	ldr	r3, [pc, #344]	; (8001800 <HAL_RCC_OscConfig+0x628>)
 80016a6:	68da      	ldr	r2, [r3, #12]
 80016a8:	4b56      	ldr	r3, [pc, #344]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 80016aa:	4013      	ands	r3, r2
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	6a11      	ldr	r1, [r2, #32]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016b4:	3a01      	subs	r2, #1
 80016b6:	0112      	lsls	r2, r2, #4
 80016b8:	4311      	orrs	r1, r2
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80016be:	0212      	lsls	r2, r2, #8
 80016c0:	4311      	orrs	r1, r2
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016c6:	0852      	lsrs	r2, r2, #1
 80016c8:	3a01      	subs	r2, #1
 80016ca:	0552      	lsls	r2, r2, #21
 80016cc:	4311      	orrs	r1, r2
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016d2:	0852      	lsrs	r2, r2, #1
 80016d4:	3a01      	subs	r2, #1
 80016d6:	0652      	lsls	r2, r2, #25
 80016d8:	4311      	orrs	r1, r2
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80016de:	06d2      	lsls	r2, r2, #27
 80016e0:	430a      	orrs	r2, r1
 80016e2:	4947      	ldr	r1, [pc, #284]	; (8001800 <HAL_RCC_OscConfig+0x628>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016e8:	4b45      	ldr	r3, [pc, #276]	; (8001800 <HAL_RCC_OscConfig+0x628>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a44      	ldr	r2, [pc, #272]	; (8001800 <HAL_RCC_OscConfig+0x628>)
 80016ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016f4:	4b42      	ldr	r3, [pc, #264]	; (8001800 <HAL_RCC_OscConfig+0x628>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	4a41      	ldr	r2, [pc, #260]	; (8001800 <HAL_RCC_OscConfig+0x628>)
 80016fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001700:	f7ff f9a0 	bl	8000a44 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001708:	f7ff f99c 	bl	8000a44 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e06e      	b.n	80017f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800171a:	4b39      	ldr	r3, [pc, #228]	; (8001800 <HAL_RCC_OscConfig+0x628>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0x530>
 8001726:	e066      	b.n	80017f6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001728:	4b35      	ldr	r3, [pc, #212]	; (8001800 <HAL_RCC_OscConfig+0x628>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a34      	ldr	r2, [pc, #208]	; (8001800 <HAL_RCC_OscConfig+0x628>)
 800172e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001732:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001734:	4b32      	ldr	r3, [pc, #200]	; (8001800 <HAL_RCC_OscConfig+0x628>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	4a31      	ldr	r2, [pc, #196]	; (8001800 <HAL_RCC_OscConfig+0x628>)
 800173a:	f023 0303 	bic.w	r3, r3, #3
 800173e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001740:	4b2f      	ldr	r3, [pc, #188]	; (8001800 <HAL_RCC_OscConfig+0x628>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	4a2e      	ldr	r2, [pc, #184]	; (8001800 <HAL_RCC_OscConfig+0x628>)
 8001746:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800174a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800174e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7ff f978 	bl	8000a44 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001758:	f7ff f974 	bl	8000a44 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e046      	b.n	80017f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800176a:	4b25      	ldr	r3, [pc, #148]	; (8001800 <HAL_RCC_OscConfig+0x628>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0x580>
 8001776:	e03e      	b.n	80017f6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d101      	bne.n	8001784 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e039      	b.n	80017f8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001784:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <HAL_RCC_OscConfig+0x628>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f003 0203 	and.w	r2, r3, #3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	429a      	cmp	r2, r3
 8001796:	d12c      	bne.n	80017f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a2:	3b01      	subs	r3, #1
 80017a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d123      	bne.n	80017f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d11b      	bne.n	80017f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d113      	bne.n	80017f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d4:	085b      	lsrs	r3, r3, #1
 80017d6:	3b01      	subs	r3, #1
 80017d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017da:	429a      	cmp	r2, r3
 80017dc:	d109      	bne.n	80017f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e8:	085b      	lsrs	r3, r3, #1
 80017ea:	3b01      	subs	r3, #1
 80017ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d001      	beq.n	80017f6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3720      	adds	r7, #32
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40021000 	.word	0x40021000
 8001804:	019f800c 	.word	0x019f800c

08001808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e11e      	b.n	8001a5e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001820:	4b91      	ldr	r3, [pc, #580]	; (8001a68 <HAL_RCC_ClockConfig+0x260>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 030f 	and.w	r3, r3, #15
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	429a      	cmp	r2, r3
 800182c:	d910      	bls.n	8001850 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182e:	4b8e      	ldr	r3, [pc, #568]	; (8001a68 <HAL_RCC_ClockConfig+0x260>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 020f 	bic.w	r2, r3, #15
 8001836:	498c      	ldr	r1, [pc, #560]	; (8001a68 <HAL_RCC_ClockConfig+0x260>)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	4313      	orrs	r3, r2
 800183c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800183e:	4b8a      	ldr	r3, [pc, #552]	; (8001a68 <HAL_RCC_ClockConfig+0x260>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d001      	beq.n	8001850 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e106      	b.n	8001a5e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b00      	cmp	r3, #0
 800185a:	d073      	beq.n	8001944 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b03      	cmp	r3, #3
 8001862:	d129      	bne.n	80018b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001864:	4b81      	ldr	r3, [pc, #516]	; (8001a6c <HAL_RCC_ClockConfig+0x264>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e0f4      	b.n	8001a5e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001874:	f000 f99e 	bl	8001bb4 <RCC_GetSysClockFreqFromPLLSource>
 8001878:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	4a7c      	ldr	r2, [pc, #496]	; (8001a70 <HAL_RCC_ClockConfig+0x268>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d93f      	bls.n	8001902 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001882:	4b7a      	ldr	r3, [pc, #488]	; (8001a6c <HAL_RCC_ClockConfig+0x264>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d009      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001896:	2b00      	cmp	r3, #0
 8001898:	d033      	beq.n	8001902 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d12f      	bne.n	8001902 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80018a2:	4b72      	ldr	r3, [pc, #456]	; (8001a6c <HAL_RCC_ClockConfig+0x264>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018aa:	4a70      	ldr	r2, [pc, #448]	; (8001a6c <HAL_RCC_ClockConfig+0x264>)
 80018ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80018b2:	2380      	movs	r3, #128	; 0x80
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	e024      	b.n	8001902 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d107      	bne.n	80018d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018c0:	4b6a      	ldr	r3, [pc, #424]	; (8001a6c <HAL_RCC_ClockConfig+0x264>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d109      	bne.n	80018e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e0c6      	b.n	8001a5e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018d0:	4b66      	ldr	r3, [pc, #408]	; (8001a6c <HAL_RCC_ClockConfig+0x264>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0be      	b.n	8001a5e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80018e0:	f000 f8ce 	bl	8001a80 <HAL_RCC_GetSysClockFreq>
 80018e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	4a61      	ldr	r2, [pc, #388]	; (8001a70 <HAL_RCC_ClockConfig+0x268>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d909      	bls.n	8001902 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80018ee:	4b5f      	ldr	r3, [pc, #380]	; (8001a6c <HAL_RCC_ClockConfig+0x264>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018f6:	4a5d      	ldr	r2, [pc, #372]	; (8001a6c <HAL_RCC_ClockConfig+0x264>)
 80018f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80018fe:	2380      	movs	r3, #128	; 0x80
 8001900:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001902:	4b5a      	ldr	r3, [pc, #360]	; (8001a6c <HAL_RCC_ClockConfig+0x264>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f023 0203 	bic.w	r2, r3, #3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	4957      	ldr	r1, [pc, #348]	; (8001a6c <HAL_RCC_ClockConfig+0x264>)
 8001910:	4313      	orrs	r3, r2
 8001912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001914:	f7ff f896 	bl	8000a44 <HAL_GetTick>
 8001918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191a:	e00a      	b.n	8001932 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800191c:	f7ff f892 	bl	8000a44 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	f241 3288 	movw	r2, #5000	; 0x1388
 800192a:	4293      	cmp	r3, r2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e095      	b.n	8001a5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001932:	4b4e      	ldr	r3, [pc, #312]	; (8001a6c <HAL_RCC_ClockConfig+0x264>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 020c 	and.w	r2, r3, #12
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	429a      	cmp	r2, r3
 8001942:	d1eb      	bne.n	800191c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d023      	beq.n	8001998 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	d005      	beq.n	8001968 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800195c:	4b43      	ldr	r3, [pc, #268]	; (8001a6c <HAL_RCC_ClockConfig+0x264>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	4a42      	ldr	r2, [pc, #264]	; (8001a6c <HAL_RCC_ClockConfig+0x264>)
 8001962:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001966:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b00      	cmp	r3, #0
 8001972:	d007      	beq.n	8001984 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001974:	4b3d      	ldr	r3, [pc, #244]	; (8001a6c <HAL_RCC_ClockConfig+0x264>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800197c:	4a3b      	ldr	r2, [pc, #236]	; (8001a6c <HAL_RCC_ClockConfig+0x264>)
 800197e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001982:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001984:	4b39      	ldr	r3, [pc, #228]	; (8001a6c <HAL_RCC_ClockConfig+0x264>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	4936      	ldr	r1, [pc, #216]	; (8001a6c <HAL_RCC_ClockConfig+0x264>)
 8001992:	4313      	orrs	r3, r2
 8001994:	608b      	str	r3, [r1, #8]
 8001996:	e008      	b.n	80019aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	2b80      	cmp	r3, #128	; 0x80
 800199c:	d105      	bne.n	80019aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800199e:	4b33      	ldr	r3, [pc, #204]	; (8001a6c <HAL_RCC_ClockConfig+0x264>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	4a32      	ldr	r2, [pc, #200]	; (8001a6c <HAL_RCC_ClockConfig+0x264>)
 80019a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019aa:	4b2f      	ldr	r3, [pc, #188]	; (8001a68 <HAL_RCC_ClockConfig+0x260>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d21d      	bcs.n	80019f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b8:	4b2b      	ldr	r3, [pc, #172]	; (8001a68 <HAL_RCC_ClockConfig+0x260>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f023 020f 	bic.w	r2, r3, #15
 80019c0:	4929      	ldr	r1, [pc, #164]	; (8001a68 <HAL_RCC_ClockConfig+0x260>)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019c8:	f7ff f83c 	bl	8000a44 <HAL_GetTick>
 80019cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ce:	e00a      	b.n	80019e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d0:	f7ff f838 	bl	8000a44 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	f241 3288 	movw	r2, #5000	; 0x1388
 80019de:	4293      	cmp	r3, r2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e03b      	b.n	8001a5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e6:	4b20      	ldr	r3, [pc, #128]	; (8001a68 <HAL_RCC_ClockConfig+0x260>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d1ed      	bne.n	80019d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d008      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a00:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <HAL_RCC_ClockConfig+0x264>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	4917      	ldr	r1, [pc, #92]	; (8001a6c <HAL_RCC_ClockConfig+0x264>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d009      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a1e:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <HAL_RCC_ClockConfig+0x264>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	490f      	ldr	r1, [pc, #60]	; (8001a6c <HAL_RCC_ClockConfig+0x264>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a32:	f000 f825 	bl	8001a80 <HAL_RCC_GetSysClockFreq>
 8001a36:	4602      	mov	r2, r0
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <HAL_RCC_ClockConfig+0x264>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	091b      	lsrs	r3, r3, #4
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	490c      	ldr	r1, [pc, #48]	; (8001a74 <HAL_RCC_ClockConfig+0x26c>)
 8001a44:	5ccb      	ldrb	r3, [r1, r3]
 8001a46:	f003 031f 	and.w	r3, r3, #31
 8001a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <HAL_RCC_ClockConfig+0x270>)
 8001a50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <HAL_RCC_ClockConfig+0x274>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe ffa8 	bl	80009ac <HAL_InitTick>
 8001a5c:	4603      	mov	r3, r0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40022000 	.word	0x40022000
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	04c4b400 	.word	0x04c4b400
 8001a74:	08002d54 	.word	0x08002d54
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	20000004 	.word	0x20000004

08001a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b087      	sub	sp, #28
 8001a84:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a86:	4b2c      	ldr	r3, [pc, #176]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d102      	bne.n	8001a98 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a92:	4b2a      	ldr	r3, [pc, #168]	; (8001b3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	e047      	b.n	8001b28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a98:	4b27      	ldr	r3, [pc, #156]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 030c 	and.w	r3, r3, #12
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d102      	bne.n	8001aaa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001aa4:	4b26      	ldr	r3, [pc, #152]	; (8001b40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	e03e      	b.n	8001b28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001aaa:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	2b0c      	cmp	r3, #12
 8001ab4:	d136      	bne.n	8001b24 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ab6:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ac0:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	3301      	adds	r3, #1
 8001acc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	d10c      	bne.n	8001aee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ad4:	4a1a      	ldr	r2, [pc, #104]	; (8001b40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001adc:	4a16      	ldr	r2, [pc, #88]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ade:	68d2      	ldr	r2, [r2, #12]
 8001ae0:	0a12      	lsrs	r2, r2, #8
 8001ae2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ae6:	fb02 f303 	mul.w	r3, r2, r3
 8001aea:	617b      	str	r3, [r7, #20]
      break;
 8001aec:	e00c      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001aee:	4a13      	ldr	r2, [pc, #76]	; (8001b3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af6:	4a10      	ldr	r2, [pc, #64]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001af8:	68d2      	ldr	r2, [r2, #12]
 8001afa:	0a12      	lsrs	r2, r2, #8
 8001afc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b00:	fb02 f303 	mul.w	r3, r2, r3
 8001b04:	617b      	str	r3, [r7, #20]
      break;
 8001b06:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	0e5b      	lsrs	r3, r3, #25
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	3301      	adds	r3, #1
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	e001      	b.n	8001b28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b28:	693b      	ldr	r3, [r7, #16]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	371c      	adds	r7, #28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	00f42400 	.word	0x00f42400
 8001b40:	016e3600 	.word	0x016e3600

08001b44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	20000000 	.word	0x20000000

08001b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b60:	f7ff fff0 	bl	8001b44 <HAL_RCC_GetHCLKFreq>
 8001b64:	4602      	mov	r2, r0
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	0a1b      	lsrs	r3, r3, #8
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	4904      	ldr	r1, [pc, #16]	; (8001b84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b72:	5ccb      	ldrb	r3, [r1, r3]
 8001b74:	f003 031f 	and.w	r3, r3, #31
 8001b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40021000 	.word	0x40021000
 8001b84:	08002d64 	.word	0x08002d64

08001b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b8c:	f7ff ffda 	bl	8001b44 <HAL_RCC_GetHCLKFreq>
 8001b90:	4602      	mov	r2, r0
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	0adb      	lsrs	r3, r3, #11
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	4904      	ldr	r1, [pc, #16]	; (8001bb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ba0:	f003 031f 	and.w	r3, r3, #31
 8001ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	08002d64 	.word	0x08002d64

08001bb4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b087      	sub	sp, #28
 8001bb8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bba:	4b1e      	ldr	r3, [pc, #120]	; (8001c34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	3301      	adds	r3, #1
 8001bd0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d10c      	bne.n	8001bf2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bd8:	4a17      	ldr	r2, [pc, #92]	; (8001c38 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be0:	4a14      	ldr	r2, [pc, #80]	; (8001c34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001be2:	68d2      	ldr	r2, [r2, #12]
 8001be4:	0a12      	lsrs	r2, r2, #8
 8001be6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bea:	fb02 f303 	mul.w	r3, r2, r3
 8001bee:	617b      	str	r3, [r7, #20]
    break;
 8001bf0:	e00c      	b.n	8001c0c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bf2:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfa:	4a0e      	ldr	r2, [pc, #56]	; (8001c34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bfc:	68d2      	ldr	r2, [r2, #12]
 8001bfe:	0a12      	lsrs	r2, r2, #8
 8001c00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c04:	fb02 f303 	mul.w	r3, r2, r3
 8001c08:	617b      	str	r3, [r7, #20]
    break;
 8001c0a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c0c:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	0e5b      	lsrs	r3, r3, #25
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	3301      	adds	r3, #1
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c24:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001c26:	687b      	ldr	r3, [r7, #4]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	371c      	adds	r7, #28
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	40021000 	.word	0x40021000
 8001c38:	016e3600 	.word	0x016e3600
 8001c3c:	00f42400 	.word	0x00f42400

08001c40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c48:	2300      	movs	r3, #0
 8001c4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 8098 	beq.w	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c62:	4b43      	ldr	r3, [pc, #268]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10d      	bne.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c6e:	4b40      	ldr	r3, [pc, #256]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c72:	4a3f      	ldr	r2, [pc, #252]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c78:	6593      	str	r3, [r2, #88]	; 0x58
 8001c7a:	4b3d      	ldr	r3, [pc, #244]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c86:	2301      	movs	r3, #1
 8001c88:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c8a:	4b3a      	ldr	r3, [pc, #232]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a39      	ldr	r2, [pc, #228]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c96:	f7fe fed5 	bl	8000a44 <HAL_GetTick>
 8001c9a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c9c:	e009      	b.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c9e:	f7fe fed1 	bl	8000a44 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d902      	bls.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	74fb      	strb	r3, [r7, #19]
        break;
 8001cb0:	e005      	b.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cb2:	4b30      	ldr	r3, [pc, #192]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0ef      	beq.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001cbe:	7cfb      	ldrb	r3, [r7, #19]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d159      	bne.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001cc4:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d01e      	beq.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d019      	beq.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ce0:	4b23      	ldr	r3, [pc, #140]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001cec:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf2:	4a1f      	ldr	r2, [pc, #124]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cfc:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d02:	4a1b      	ldr	r2, [pc, #108]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d0c:	4a18      	ldr	r2, [pc, #96]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d016      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1e:	f7fe fe91 	bl	8000a44 <HAL_GetTick>
 8001d22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d24:	e00b      	b.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d26:	f7fe fe8d 	bl	8000a44 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d902      	bls.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	74fb      	strb	r3, [r7, #19]
            break;
 8001d3c:	e006      	b.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0ec      	beq.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001d4c:	7cfb      	ldrb	r3, [r7, #19]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10b      	bne.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d52:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d60:	4903      	ldr	r1, [pc, #12]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001d68:	e008      	b.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d6a:	7cfb      	ldrb	r3, [r7, #19]
 8001d6c:	74bb      	strb	r3, [r7, #18]
 8001d6e:	e005      	b.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001d70:	40021000 	.word	0x40021000
 8001d74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d78:	7cfb      	ldrb	r3, [r7, #19]
 8001d7a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d7c:	7c7b      	ldrb	r3, [r7, #17]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d105      	bne.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d82:	4ba7      	ldr	r3, [pc, #668]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d86:	4aa6      	ldr	r2, [pc, #664]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00a      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d9a:	4ba1      	ldr	r3, [pc, #644]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001da0:	f023 0203 	bic.w	r2, r3, #3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	499d      	ldr	r1, [pc, #628]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00a      	beq.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001dbc:	4b98      	ldr	r3, [pc, #608]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc2:	f023 020c 	bic.w	r2, r3, #12
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	4995      	ldr	r1, [pc, #596]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00a      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001dde:	4b90      	ldr	r3, [pc, #576]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	498c      	ldr	r1, [pc, #560]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0308 	and.w	r3, r3, #8
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00a      	beq.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e00:	4b87      	ldr	r3, [pc, #540]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	4984      	ldr	r1, [pc, #528]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00a      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e22:	4b7f      	ldr	r3, [pc, #508]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	497b      	ldr	r1, [pc, #492]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0320 	and.w	r3, r3, #32
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00a      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e44:	4b76      	ldr	r3, [pc, #472]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	4973      	ldr	r1, [pc, #460]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00a      	beq.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e66:	4b6e      	ldr	r3, [pc, #440]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e6c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69db      	ldr	r3, [r3, #28]
 8001e74:	496a      	ldr	r1, [pc, #424]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00a      	beq.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e88:	4b65      	ldr	r3, [pc, #404]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e8e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	4962      	ldr	r1, [pc, #392]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00a      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001eaa:	4b5d      	ldr	r3, [pc, #372]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	4959      	ldr	r1, [pc, #356]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00a      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001ecc:	4b54      	ldr	r3, [pc, #336]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ece:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ed2:	f023 0203 	bic.w	r2, r3, #3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eda:	4951      	ldr	r1, [pc, #324]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00a      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001eee:	4b4c      	ldr	r3, [pc, #304]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efc:	4948      	ldr	r1, [pc, #288]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d015      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f10:	4b43      	ldr	r3, [pc, #268]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4940      	ldr	r1, [pc, #256]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f2e:	d105      	bne.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f30:	4b3b      	ldr	r3, [pc, #236]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	4a3a      	ldr	r2, [pc, #232]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f3a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d015      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f48:	4b35      	ldr	r3, [pc, #212]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f56:	4932      	ldr	r1, [pc, #200]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f66:	d105      	bne.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f68:	4b2d      	ldr	r3, [pc, #180]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	4a2c      	ldr	r2, [pc, #176]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f72:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d015      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001f80:	4b27      	ldr	r3, [pc, #156]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f86:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8e:	4924      	ldr	r1, [pc, #144]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f9e:	d105      	bne.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fa0:	4b1f      	ldr	r3, [pc, #124]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	4a1e      	ldr	r2, [pc, #120]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001faa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d015      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fb8:	4b19      	ldr	r3, [pc, #100]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc6:	4916      	ldr	r1, [pc, #88]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fd6:	d105      	bne.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	4a10      	ldr	r2, [pc, #64]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fe2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d019      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	4908      	ldr	r1, [pc, #32]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002000:	4313      	orrs	r3, r2
 8002002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800200e:	d109      	bne.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002010:	4b03      	ldr	r3, [pc, #12]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	4a02      	ldr	r2, [pc, #8]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002016:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800201a:	60d3      	str	r3, [r2, #12]
 800201c:	e002      	b.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800201e:	bf00      	nop
 8002020:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d015      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002030:	4b29      	ldr	r3, [pc, #164]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002036:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	4926      	ldr	r1, [pc, #152]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800204e:	d105      	bne.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002050:	4b21      	ldr	r3, [pc, #132]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	4a20      	ldr	r2, [pc, #128]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800205a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d015      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002068:	4b1b      	ldr	r3, [pc, #108]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002076:	4918      	ldr	r1, [pc, #96]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002086:	d105      	bne.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002088:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	4a12      	ldr	r2, [pc, #72]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800208e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002092:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d015      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80020a0:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ae:	490a      	ldr	r1, [pc, #40]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020be:	d105      	bne.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4a04      	ldr	r2, [pc, #16]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80020cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40021000 	.word	0x40021000

080020dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e042      	b.n	8002174 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d106      	bne.n	8002106 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7fe fb75 	bl	80007f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2224      	movs	r2, #36	; 0x24
 800210a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 0201 	bic.w	r2, r2, #1
 800211c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f82c 	bl	800217c <UART_SetConfig>
 8002124:	4603      	mov	r3, r0
 8002126:	2b01      	cmp	r3, #1
 8002128:	d101      	bne.n	800212e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e022      	b.n	8002174 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002132:	2b00      	cmp	r3, #0
 8002134:	d002      	beq.n	800213c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 fb1c 	bl	8002774 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800214a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800215a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0201 	orr.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 fba3 	bl	80028b8 <UART_CheckIdleState>
 8002172:	4603      	mov	r3, r0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800217c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002180:	b08c      	sub	sp, #48	; 0x30
 8002182:	af00      	add	r7, sp, #0
 8002184:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	431a      	orrs	r2, r3
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	431a      	orrs	r2, r3
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	4baa      	ldr	r3, [pc, #680]	; (8002454 <UART_SetConfig+0x2d8>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80021b4:	430b      	orrs	r3, r1
 80021b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a9f      	ldr	r2, [pc, #636]	; (8002458 <UART_SetConfig+0x2dc>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d004      	beq.n	80021e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021e4:	4313      	orrs	r3, r2
 80021e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80021f2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	6812      	ldr	r2, [r2, #0]
 80021fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80021fc:	430b      	orrs	r3, r1
 80021fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002206:	f023 010f 	bic.w	r1, r3, #15
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a90      	ldr	r2, [pc, #576]	; (800245c <UART_SetConfig+0x2e0>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d125      	bne.n	800226c <UART_SetConfig+0xf0>
 8002220:	4b8f      	ldr	r3, [pc, #572]	; (8002460 <UART_SetConfig+0x2e4>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	2b03      	cmp	r3, #3
 800222c:	d81a      	bhi.n	8002264 <UART_SetConfig+0xe8>
 800222e:	a201      	add	r2, pc, #4	; (adr r2, 8002234 <UART_SetConfig+0xb8>)
 8002230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002234:	08002245 	.word	0x08002245
 8002238:	08002255 	.word	0x08002255
 800223c:	0800224d 	.word	0x0800224d
 8002240:	0800225d 	.word	0x0800225d
 8002244:	2301      	movs	r3, #1
 8002246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800224a:	e116      	b.n	800247a <UART_SetConfig+0x2fe>
 800224c:	2302      	movs	r3, #2
 800224e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002252:	e112      	b.n	800247a <UART_SetConfig+0x2fe>
 8002254:	2304      	movs	r3, #4
 8002256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800225a:	e10e      	b.n	800247a <UART_SetConfig+0x2fe>
 800225c:	2308      	movs	r3, #8
 800225e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002262:	e10a      	b.n	800247a <UART_SetConfig+0x2fe>
 8002264:	2310      	movs	r3, #16
 8002266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800226a:	e106      	b.n	800247a <UART_SetConfig+0x2fe>
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a7c      	ldr	r2, [pc, #496]	; (8002464 <UART_SetConfig+0x2e8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d138      	bne.n	80022e8 <UART_SetConfig+0x16c>
 8002276:	4b7a      	ldr	r3, [pc, #488]	; (8002460 <UART_SetConfig+0x2e4>)
 8002278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227c:	f003 030c 	and.w	r3, r3, #12
 8002280:	2b0c      	cmp	r3, #12
 8002282:	d82d      	bhi.n	80022e0 <UART_SetConfig+0x164>
 8002284:	a201      	add	r2, pc, #4	; (adr r2, 800228c <UART_SetConfig+0x110>)
 8002286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800228a:	bf00      	nop
 800228c:	080022c1 	.word	0x080022c1
 8002290:	080022e1 	.word	0x080022e1
 8002294:	080022e1 	.word	0x080022e1
 8002298:	080022e1 	.word	0x080022e1
 800229c:	080022d1 	.word	0x080022d1
 80022a0:	080022e1 	.word	0x080022e1
 80022a4:	080022e1 	.word	0x080022e1
 80022a8:	080022e1 	.word	0x080022e1
 80022ac:	080022c9 	.word	0x080022c9
 80022b0:	080022e1 	.word	0x080022e1
 80022b4:	080022e1 	.word	0x080022e1
 80022b8:	080022e1 	.word	0x080022e1
 80022bc:	080022d9 	.word	0x080022d9
 80022c0:	2300      	movs	r3, #0
 80022c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022c6:	e0d8      	b.n	800247a <UART_SetConfig+0x2fe>
 80022c8:	2302      	movs	r3, #2
 80022ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022ce:	e0d4      	b.n	800247a <UART_SetConfig+0x2fe>
 80022d0:	2304      	movs	r3, #4
 80022d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022d6:	e0d0      	b.n	800247a <UART_SetConfig+0x2fe>
 80022d8:	2308      	movs	r3, #8
 80022da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022de:	e0cc      	b.n	800247a <UART_SetConfig+0x2fe>
 80022e0:	2310      	movs	r3, #16
 80022e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022e6:	e0c8      	b.n	800247a <UART_SetConfig+0x2fe>
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a5e      	ldr	r2, [pc, #376]	; (8002468 <UART_SetConfig+0x2ec>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d125      	bne.n	800233e <UART_SetConfig+0x1c2>
 80022f2:	4b5b      	ldr	r3, [pc, #364]	; (8002460 <UART_SetConfig+0x2e4>)
 80022f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80022fc:	2b30      	cmp	r3, #48	; 0x30
 80022fe:	d016      	beq.n	800232e <UART_SetConfig+0x1b2>
 8002300:	2b30      	cmp	r3, #48	; 0x30
 8002302:	d818      	bhi.n	8002336 <UART_SetConfig+0x1ba>
 8002304:	2b20      	cmp	r3, #32
 8002306:	d00a      	beq.n	800231e <UART_SetConfig+0x1a2>
 8002308:	2b20      	cmp	r3, #32
 800230a:	d814      	bhi.n	8002336 <UART_SetConfig+0x1ba>
 800230c:	2b00      	cmp	r3, #0
 800230e:	d002      	beq.n	8002316 <UART_SetConfig+0x19a>
 8002310:	2b10      	cmp	r3, #16
 8002312:	d008      	beq.n	8002326 <UART_SetConfig+0x1aa>
 8002314:	e00f      	b.n	8002336 <UART_SetConfig+0x1ba>
 8002316:	2300      	movs	r3, #0
 8002318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800231c:	e0ad      	b.n	800247a <UART_SetConfig+0x2fe>
 800231e:	2302      	movs	r3, #2
 8002320:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002324:	e0a9      	b.n	800247a <UART_SetConfig+0x2fe>
 8002326:	2304      	movs	r3, #4
 8002328:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800232c:	e0a5      	b.n	800247a <UART_SetConfig+0x2fe>
 800232e:	2308      	movs	r3, #8
 8002330:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002334:	e0a1      	b.n	800247a <UART_SetConfig+0x2fe>
 8002336:	2310      	movs	r3, #16
 8002338:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800233c:	e09d      	b.n	800247a <UART_SetConfig+0x2fe>
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a4a      	ldr	r2, [pc, #296]	; (800246c <UART_SetConfig+0x2f0>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d125      	bne.n	8002394 <UART_SetConfig+0x218>
 8002348:	4b45      	ldr	r3, [pc, #276]	; (8002460 <UART_SetConfig+0x2e4>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002352:	2bc0      	cmp	r3, #192	; 0xc0
 8002354:	d016      	beq.n	8002384 <UART_SetConfig+0x208>
 8002356:	2bc0      	cmp	r3, #192	; 0xc0
 8002358:	d818      	bhi.n	800238c <UART_SetConfig+0x210>
 800235a:	2b80      	cmp	r3, #128	; 0x80
 800235c:	d00a      	beq.n	8002374 <UART_SetConfig+0x1f8>
 800235e:	2b80      	cmp	r3, #128	; 0x80
 8002360:	d814      	bhi.n	800238c <UART_SetConfig+0x210>
 8002362:	2b00      	cmp	r3, #0
 8002364:	d002      	beq.n	800236c <UART_SetConfig+0x1f0>
 8002366:	2b40      	cmp	r3, #64	; 0x40
 8002368:	d008      	beq.n	800237c <UART_SetConfig+0x200>
 800236a:	e00f      	b.n	800238c <UART_SetConfig+0x210>
 800236c:	2300      	movs	r3, #0
 800236e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002372:	e082      	b.n	800247a <UART_SetConfig+0x2fe>
 8002374:	2302      	movs	r3, #2
 8002376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800237a:	e07e      	b.n	800247a <UART_SetConfig+0x2fe>
 800237c:	2304      	movs	r3, #4
 800237e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002382:	e07a      	b.n	800247a <UART_SetConfig+0x2fe>
 8002384:	2308      	movs	r3, #8
 8002386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800238a:	e076      	b.n	800247a <UART_SetConfig+0x2fe>
 800238c:	2310      	movs	r3, #16
 800238e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002392:	e072      	b.n	800247a <UART_SetConfig+0x2fe>
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a35      	ldr	r2, [pc, #212]	; (8002470 <UART_SetConfig+0x2f4>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d12a      	bne.n	80023f4 <UART_SetConfig+0x278>
 800239e:	4b30      	ldr	r3, [pc, #192]	; (8002460 <UART_SetConfig+0x2e4>)
 80023a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023ac:	d01a      	beq.n	80023e4 <UART_SetConfig+0x268>
 80023ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023b2:	d81b      	bhi.n	80023ec <UART_SetConfig+0x270>
 80023b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023b8:	d00c      	beq.n	80023d4 <UART_SetConfig+0x258>
 80023ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023be:	d815      	bhi.n	80023ec <UART_SetConfig+0x270>
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <UART_SetConfig+0x250>
 80023c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023c8:	d008      	beq.n	80023dc <UART_SetConfig+0x260>
 80023ca:	e00f      	b.n	80023ec <UART_SetConfig+0x270>
 80023cc:	2300      	movs	r3, #0
 80023ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023d2:	e052      	b.n	800247a <UART_SetConfig+0x2fe>
 80023d4:	2302      	movs	r3, #2
 80023d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023da:	e04e      	b.n	800247a <UART_SetConfig+0x2fe>
 80023dc:	2304      	movs	r3, #4
 80023de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023e2:	e04a      	b.n	800247a <UART_SetConfig+0x2fe>
 80023e4:	2308      	movs	r3, #8
 80023e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023ea:	e046      	b.n	800247a <UART_SetConfig+0x2fe>
 80023ec:	2310      	movs	r3, #16
 80023ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023f2:	e042      	b.n	800247a <UART_SetConfig+0x2fe>
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a17      	ldr	r2, [pc, #92]	; (8002458 <UART_SetConfig+0x2dc>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d13a      	bne.n	8002474 <UART_SetConfig+0x2f8>
 80023fe:	4b18      	ldr	r3, [pc, #96]	; (8002460 <UART_SetConfig+0x2e4>)
 8002400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002404:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002408:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800240c:	d01a      	beq.n	8002444 <UART_SetConfig+0x2c8>
 800240e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002412:	d81b      	bhi.n	800244c <UART_SetConfig+0x2d0>
 8002414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002418:	d00c      	beq.n	8002434 <UART_SetConfig+0x2b8>
 800241a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800241e:	d815      	bhi.n	800244c <UART_SetConfig+0x2d0>
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <UART_SetConfig+0x2b0>
 8002424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002428:	d008      	beq.n	800243c <UART_SetConfig+0x2c0>
 800242a:	e00f      	b.n	800244c <UART_SetConfig+0x2d0>
 800242c:	2300      	movs	r3, #0
 800242e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002432:	e022      	b.n	800247a <UART_SetConfig+0x2fe>
 8002434:	2302      	movs	r3, #2
 8002436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800243a:	e01e      	b.n	800247a <UART_SetConfig+0x2fe>
 800243c:	2304      	movs	r3, #4
 800243e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002442:	e01a      	b.n	800247a <UART_SetConfig+0x2fe>
 8002444:	2308      	movs	r3, #8
 8002446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800244a:	e016      	b.n	800247a <UART_SetConfig+0x2fe>
 800244c:	2310      	movs	r3, #16
 800244e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002452:	e012      	b.n	800247a <UART_SetConfig+0x2fe>
 8002454:	cfff69f3 	.word	0xcfff69f3
 8002458:	40008000 	.word	0x40008000
 800245c:	40013800 	.word	0x40013800
 8002460:	40021000 	.word	0x40021000
 8002464:	40004400 	.word	0x40004400
 8002468:	40004800 	.word	0x40004800
 800246c:	40004c00 	.word	0x40004c00
 8002470:	40005000 	.word	0x40005000
 8002474:	2310      	movs	r3, #16
 8002476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4aae      	ldr	r2, [pc, #696]	; (8002738 <UART_SetConfig+0x5bc>)
 8002480:	4293      	cmp	r3, r2
 8002482:	f040 8097 	bne.w	80025b4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002486:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800248a:	2b08      	cmp	r3, #8
 800248c:	d823      	bhi.n	80024d6 <UART_SetConfig+0x35a>
 800248e:	a201      	add	r2, pc, #4	; (adr r2, 8002494 <UART_SetConfig+0x318>)
 8002490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002494:	080024b9 	.word	0x080024b9
 8002498:	080024d7 	.word	0x080024d7
 800249c:	080024c1 	.word	0x080024c1
 80024a0:	080024d7 	.word	0x080024d7
 80024a4:	080024c7 	.word	0x080024c7
 80024a8:	080024d7 	.word	0x080024d7
 80024ac:	080024d7 	.word	0x080024d7
 80024b0:	080024d7 	.word	0x080024d7
 80024b4:	080024cf 	.word	0x080024cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024b8:	f7ff fb50 	bl	8001b5c <HAL_RCC_GetPCLK1Freq>
 80024bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80024be:	e010      	b.n	80024e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024c0:	4b9e      	ldr	r3, [pc, #632]	; (800273c <UART_SetConfig+0x5c0>)
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80024c4:	e00d      	b.n	80024e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024c6:	f7ff fadb 	bl	8001a80 <HAL_RCC_GetSysClockFreq>
 80024ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80024cc:	e009      	b.n	80024e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80024d4:	e005      	b.n	80024e2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80024e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 8130 	beq.w	800274a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	4a94      	ldr	r2, [pc, #592]	; (8002740 <UART_SetConfig+0x5c4>)
 80024f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024f4:	461a      	mov	r2, r3
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	4413      	add	r3, r2
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	429a      	cmp	r2, r3
 800250c:	d305      	bcc.n	800251a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	429a      	cmp	r2, r3
 8002518:	d903      	bls.n	8002522 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002520:	e113      	b.n	800274a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	2200      	movs	r2, #0
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	60fa      	str	r2, [r7, #12]
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	4a84      	ldr	r2, [pc, #528]	; (8002740 <UART_SetConfig+0x5c4>)
 8002530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002534:	b29b      	uxth	r3, r3
 8002536:	2200      	movs	r2, #0
 8002538:	603b      	str	r3, [r7, #0]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002540:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002544:	f7fd fe68 	bl	8000218 <__aeabi_uldivmod>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4610      	mov	r0, r2
 800254e:	4619      	mov	r1, r3
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	020b      	lsls	r3, r1, #8
 800255a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800255e:	0202      	lsls	r2, r0, #8
 8002560:	6979      	ldr	r1, [r7, #20]
 8002562:	6849      	ldr	r1, [r1, #4]
 8002564:	0849      	lsrs	r1, r1, #1
 8002566:	2000      	movs	r0, #0
 8002568:	460c      	mov	r4, r1
 800256a:	4605      	mov	r5, r0
 800256c:	eb12 0804 	adds.w	r8, r2, r4
 8002570:	eb43 0905 	adc.w	r9, r3, r5
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	469a      	mov	sl, r3
 800257c:	4693      	mov	fp, r2
 800257e:	4652      	mov	r2, sl
 8002580:	465b      	mov	r3, fp
 8002582:	4640      	mov	r0, r8
 8002584:	4649      	mov	r1, r9
 8002586:	f7fd fe47 	bl	8000218 <__aeabi_uldivmod>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4613      	mov	r3, r2
 8002590:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002598:	d308      	bcc.n	80025ac <UART_SetConfig+0x430>
 800259a:	6a3b      	ldr	r3, [r7, #32]
 800259c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025a0:	d204      	bcs.n	80025ac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6a3a      	ldr	r2, [r7, #32]
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	e0ce      	b.n	800274a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80025b2:	e0ca      	b.n	800274a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025bc:	d166      	bne.n	800268c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80025be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d827      	bhi.n	8002616 <UART_SetConfig+0x49a>
 80025c6:	a201      	add	r2, pc, #4	; (adr r2, 80025cc <UART_SetConfig+0x450>)
 80025c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025cc:	080025f1 	.word	0x080025f1
 80025d0:	080025f9 	.word	0x080025f9
 80025d4:	08002601 	.word	0x08002601
 80025d8:	08002617 	.word	0x08002617
 80025dc:	08002607 	.word	0x08002607
 80025e0:	08002617 	.word	0x08002617
 80025e4:	08002617 	.word	0x08002617
 80025e8:	08002617 	.word	0x08002617
 80025ec:	0800260f 	.word	0x0800260f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025f0:	f7ff fab4 	bl	8001b5c <HAL_RCC_GetPCLK1Freq>
 80025f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80025f6:	e014      	b.n	8002622 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80025f8:	f7ff fac6 	bl	8001b88 <HAL_RCC_GetPCLK2Freq>
 80025fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80025fe:	e010      	b.n	8002622 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002600:	4b4e      	ldr	r3, [pc, #312]	; (800273c <UART_SetConfig+0x5c0>)
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002604:	e00d      	b.n	8002622 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002606:	f7ff fa3b 	bl	8001a80 <HAL_RCC_GetSysClockFreq>
 800260a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800260c:	e009      	b.n	8002622 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800260e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002614:	e005      	b.n	8002622 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8002616:	2300      	movs	r3, #0
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002620:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 8090 	beq.w	800274a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	4a44      	ldr	r2, [pc, #272]	; (8002740 <UART_SetConfig+0x5c4>)
 8002630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002634:	461a      	mov	r2, r3
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	fbb3 f3f2 	udiv	r3, r3, r2
 800263c:	005a      	lsls	r2, r3, #1
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	085b      	lsrs	r3, r3, #1
 8002644:	441a      	add	r2, r3
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	fbb2 f3f3 	udiv	r3, r2, r3
 800264e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002650:	6a3b      	ldr	r3, [r7, #32]
 8002652:	2b0f      	cmp	r3, #15
 8002654:	d916      	bls.n	8002684 <UART_SetConfig+0x508>
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800265c:	d212      	bcs.n	8002684 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	b29b      	uxth	r3, r3
 8002662:	f023 030f 	bic.w	r3, r3, #15
 8002666:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	085b      	lsrs	r3, r3, #1
 800266c:	b29b      	uxth	r3, r3
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	b29a      	uxth	r2, r3
 8002674:	8bfb      	ldrh	r3, [r7, #30]
 8002676:	4313      	orrs	r3, r2
 8002678:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	8bfa      	ldrh	r2, [r7, #30]
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	e062      	b.n	800274a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800268a:	e05e      	b.n	800274a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800268c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002690:	2b08      	cmp	r3, #8
 8002692:	d828      	bhi.n	80026e6 <UART_SetConfig+0x56a>
 8002694:	a201      	add	r2, pc, #4	; (adr r2, 800269c <UART_SetConfig+0x520>)
 8002696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269a:	bf00      	nop
 800269c:	080026c1 	.word	0x080026c1
 80026a0:	080026c9 	.word	0x080026c9
 80026a4:	080026d1 	.word	0x080026d1
 80026a8:	080026e7 	.word	0x080026e7
 80026ac:	080026d7 	.word	0x080026d7
 80026b0:	080026e7 	.word	0x080026e7
 80026b4:	080026e7 	.word	0x080026e7
 80026b8:	080026e7 	.word	0x080026e7
 80026bc:	080026df 	.word	0x080026df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026c0:	f7ff fa4c 	bl	8001b5c <HAL_RCC_GetPCLK1Freq>
 80026c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80026c6:	e014      	b.n	80026f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80026c8:	f7ff fa5e 	bl	8001b88 <HAL_RCC_GetPCLK2Freq>
 80026cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80026ce:	e010      	b.n	80026f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026d0:	4b1a      	ldr	r3, [pc, #104]	; (800273c <UART_SetConfig+0x5c0>)
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80026d4:	e00d      	b.n	80026f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026d6:	f7ff f9d3 	bl	8001a80 <HAL_RCC_GetSysClockFreq>
 80026da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80026dc:	e009      	b.n	80026f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80026e4:	e005      	b.n	80026f2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80026f0:	bf00      	nop
    }

    if (pclk != 0U)
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d028      	beq.n	800274a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	4a10      	ldr	r2, [pc, #64]	; (8002740 <UART_SetConfig+0x5c4>)
 80026fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002702:	461a      	mov	r2, r3
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	fbb3 f2f2 	udiv	r2, r3, r2
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	085b      	lsrs	r3, r3, #1
 8002710:	441a      	add	r2, r3
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	fbb2 f3f3 	udiv	r3, r2, r3
 800271a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	2b0f      	cmp	r3, #15
 8002720:	d910      	bls.n	8002744 <UART_SetConfig+0x5c8>
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002728:	d20c      	bcs.n	8002744 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	b29a      	uxth	r2, r3
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	60da      	str	r2, [r3, #12]
 8002734:	e009      	b.n	800274a <UART_SetConfig+0x5ce>
 8002736:	bf00      	nop
 8002738:	40008000 	.word	0x40008000
 800273c:	00f42400 	.word	0x00f42400
 8002740:	08002d6c 	.word	0x08002d6c
      }
      else
      {
        ret = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	2201      	movs	r2, #1
 800274e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	2201      	movs	r2, #1
 8002756:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2200      	movs	r2, #0
 800275e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	2200      	movs	r2, #0
 8002764:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002766:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800276a:	4618      	mov	r0, r3
 800276c:	3730      	adds	r7, #48	; 0x30
 800276e:	46bd      	mov	sp, r7
 8002770:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002774 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00a      	beq.n	800279e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00a      	beq.n	80027c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00a      	beq.n	80027e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002808:	f003 0310 	and.w	r3, r3, #16
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00a      	beq.n	8002826 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	f003 0320 	and.w	r3, r3, #32
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00a      	beq.n	8002848 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01a      	beq.n	800288a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002872:	d10a      	bne.n	800288a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00a      	beq.n	80028ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	605a      	str	r2, [r3, #4]
  }
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af02      	add	r7, sp, #8
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80028c8:	f7fe f8bc 	bl	8000a44 <HAL_GetTick>
 80028cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0308 	and.w	r3, r3, #8
 80028d8:	2b08      	cmp	r3, #8
 80028da:	d10e      	bne.n	80028fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f82f 	bl	800294e <UART_WaitOnFlagUntilTimeout>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e025      	b.n	8002946 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b04      	cmp	r3, #4
 8002906:	d10e      	bne.n	8002926 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002908:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f819 	bl	800294e <UART_WaitOnFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e00f      	b.n	8002946 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2220      	movs	r2, #32
 800292a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2220      	movs	r2, #32
 8002932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b09c      	sub	sp, #112	; 0x70
 8002952:	af00      	add	r7, sp, #0
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	603b      	str	r3, [r7, #0]
 800295a:	4613      	mov	r3, r2
 800295c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800295e:	e0a9      	b.n	8002ab4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002960:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002966:	f000 80a5 	beq.w	8002ab4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800296a:	f7fe f86b 	bl	8000a44 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002976:	429a      	cmp	r2, r3
 8002978:	d302      	bcc.n	8002980 <UART_WaitOnFlagUntilTimeout+0x32>
 800297a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800297c:	2b00      	cmp	r3, #0
 800297e:	d140      	bne.n	8002a02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002988:	e853 3f00 	ldrex	r3, [r3]
 800298c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800298e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002990:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002994:	667b      	str	r3, [r7, #100]	; 0x64
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800299e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029a0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80029a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80029a6:	e841 2300 	strex	r3, r2, [r1]
 80029aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80029ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1e6      	bne.n	8002980 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	3308      	adds	r3, #8
 80029b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029bc:	e853 3f00 	ldrex	r3, [r3]
 80029c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80029c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c4:	f023 0301 	bic.w	r3, r3, #1
 80029c8:	663b      	str	r3, [r7, #96]	; 0x60
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	3308      	adds	r3, #8
 80029d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80029d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80029d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029da:	e841 2300 	strex	r3, r2, [r1]
 80029de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80029e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1e5      	bne.n	80029b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2220      	movs	r2, #32
 80029ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e069      	b.n	8002ad6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d051      	beq.n	8002ab4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a1e:	d149      	bne.n	8002ab4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a32:	e853 3f00 	ldrex	r3, [r3]
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a48:	637b      	str	r3, [r7, #52]	; 0x34
 8002a4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a50:	e841 2300 	strex	r3, r2, [r1]
 8002a54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1e6      	bne.n	8002a2a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	3308      	adds	r3, #8
 8002a62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	e853 3f00 	ldrex	r3, [r3]
 8002a6a:	613b      	str	r3, [r7, #16]
   return(result);
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	f023 0301 	bic.w	r3, r3, #1
 8002a72:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	3308      	adds	r3, #8
 8002a7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002a7c:	623a      	str	r2, [r7, #32]
 8002a7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a80:	69f9      	ldr	r1, [r7, #28]
 8002a82:	6a3a      	ldr	r2, [r7, #32]
 8002a84:	e841 2300 	strex	r3, r2, [r1]
 8002a88:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1e5      	bne.n	8002a5c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e010      	b.n	8002ad6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	69da      	ldr	r2, [r3, #28]
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	4013      	ands	r3, r2
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	bf0c      	ite	eq
 8002ac4:	2301      	moveq	r3, #1
 8002ac6:	2300      	movne	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	461a      	mov	r2, r3
 8002acc:	79fb      	ldrb	r3, [r7, #7]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	f43f af46 	beq.w	8002960 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3770      	adds	r7, #112	; 0x70
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b085      	sub	sp, #20
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <HAL_UARTEx_DisableFifoMode+0x16>
 8002af0:	2302      	movs	r3, #2
 8002af2:	e027      	b.n	8002b44 <HAL_UARTEx_DisableFifoMode+0x66>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2224      	movs	r2, #36	; 0x24
 8002b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0201 	bic.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002b22:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e02d      	b.n	8002bc4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2224      	movs	r2, #36	; 0x24
 8002b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0201 	bic.w	r2, r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f84f 	bl	8002c48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002be0:	2302      	movs	r3, #2
 8002be2:	e02d      	b.n	8002c40 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2224      	movs	r2, #36	; 0x24
 8002bf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0201 	bic.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f811 	bl	8002c48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d108      	bne.n	8002c6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002c68:	e031      	b.n	8002cce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002c6a:	2308      	movs	r3, #8
 8002c6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002c6e:	2308      	movs	r3, #8
 8002c70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	0e5b      	lsrs	r3, r3, #25
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	0f5b      	lsrs	r3, r3, #29
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002c92:	7bbb      	ldrb	r3, [r7, #14]
 8002c94:	7b3a      	ldrb	r2, [r7, #12]
 8002c96:	4911      	ldr	r1, [pc, #68]	; (8002cdc <UARTEx_SetNbDataToProcess+0x94>)
 8002c98:	5c8a      	ldrb	r2, [r1, r2]
 8002c9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002c9e:	7b3a      	ldrb	r2, [r7, #12]
 8002ca0:	490f      	ldr	r1, [pc, #60]	; (8002ce0 <UARTEx_SetNbDataToProcess+0x98>)
 8002ca2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002ca4:	fb93 f3f2 	sdiv	r3, r3, r2
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
 8002cb2:	7b7a      	ldrb	r2, [r7, #13]
 8002cb4:	4909      	ldr	r1, [pc, #36]	; (8002cdc <UARTEx_SetNbDataToProcess+0x94>)
 8002cb6:	5c8a      	ldrb	r2, [r1, r2]
 8002cb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002cbc:	7b7a      	ldrb	r2, [r7, #13]
 8002cbe:	4908      	ldr	r1, [pc, #32]	; (8002ce0 <UARTEx_SetNbDataToProcess+0x98>)
 8002cc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002cc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8002cce:	bf00      	nop
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	08002d84 	.word	0x08002d84
 8002ce0:	08002d8c 	.word	0x08002d8c

08002ce4 <__libc_init_array>:
 8002ce4:	b570      	push	{r4, r5, r6, lr}
 8002ce6:	4d0d      	ldr	r5, [pc, #52]	; (8002d1c <__libc_init_array+0x38>)
 8002ce8:	4c0d      	ldr	r4, [pc, #52]	; (8002d20 <__libc_init_array+0x3c>)
 8002cea:	1b64      	subs	r4, r4, r5
 8002cec:	10a4      	asrs	r4, r4, #2
 8002cee:	2600      	movs	r6, #0
 8002cf0:	42a6      	cmp	r6, r4
 8002cf2:	d109      	bne.n	8002d08 <__libc_init_array+0x24>
 8002cf4:	4d0b      	ldr	r5, [pc, #44]	; (8002d24 <__libc_init_array+0x40>)
 8002cf6:	4c0c      	ldr	r4, [pc, #48]	; (8002d28 <__libc_init_array+0x44>)
 8002cf8:	f000 f820 	bl	8002d3c <_init>
 8002cfc:	1b64      	subs	r4, r4, r5
 8002cfe:	10a4      	asrs	r4, r4, #2
 8002d00:	2600      	movs	r6, #0
 8002d02:	42a6      	cmp	r6, r4
 8002d04:	d105      	bne.n	8002d12 <__libc_init_array+0x2e>
 8002d06:	bd70      	pop	{r4, r5, r6, pc}
 8002d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d0c:	4798      	blx	r3
 8002d0e:	3601      	adds	r6, #1
 8002d10:	e7ee      	b.n	8002cf0 <__libc_init_array+0xc>
 8002d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d16:	4798      	blx	r3
 8002d18:	3601      	adds	r6, #1
 8002d1a:	e7f2      	b.n	8002d02 <__libc_init_array+0x1e>
 8002d1c:	08002d9c 	.word	0x08002d9c
 8002d20:	08002d9c 	.word	0x08002d9c
 8002d24:	08002d9c 	.word	0x08002d9c
 8002d28:	08002da0 	.word	0x08002da0

08002d2c <memset>:
 8002d2c:	4402      	add	r2, r0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d100      	bne.n	8002d36 <memset+0xa>
 8002d34:	4770      	bx	lr
 8002d36:	f803 1b01 	strb.w	r1, [r3], #1
 8002d3a:	e7f9      	b.n	8002d30 <memset+0x4>

08002d3c <_init>:
 8002d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d3e:	bf00      	nop
 8002d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d42:	bc08      	pop	{r3}
 8002d44:	469e      	mov	lr, r3
 8002d46:	4770      	bx	lr

08002d48 <_fini>:
 8002d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d4a:	bf00      	nop
 8002d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d4e:	bc08      	pop	{r3}
 8002d50:	469e      	mov	lr, r3
 8002d52:	4770      	bx	lr
